import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import config

bot = Bot(token=config.API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    question = State()
    answer = State()
    category = State()
    key_words = State()


# –•—ç–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (message.from_user.id,))
    id = cursor.fetchone()
    conn.close()
    if id is None:
        await create_user_profile(message.from_user.id)
        await message.answer(
            text=f'ü§ñ –ü—Ä–∏–≤–µ—Ç, —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã–π –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏!\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /add_question')
    else:
        await message.answer(
            text=f'üìö –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /add_question')


@dp.message_handler(commands=['add_question'])
async def add_question(message: types.Message):
    if message.from_user.id in config.ADMINS:
        await Form.question.set()
        await message.answer(text=f'ü§ñ –û—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö:')
    else:
        await message.answer(text='ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π :c')


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('ü§ñ –û–∫')


@dp.message_handler(state=Form.question)
async def process_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['question'] = message.text

    await Form.next()
    await message.reply('ü§ñ –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:')


@dp.message_handler(state=Form.answer)
async def process_answer(message: types.Message, state: FSMContext):
    await state.update_data(answer=message.text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π', '–§–æ—Ä–º–∞')
    markup.add('–î—Ä—É–≥–æ–µ')

    await Form.next()
    await message.reply('ü§ñ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)


@dp.message_handler(lambda message: message.text not in ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π', '–§–æ—Ä–º–∞', '–î—Ä—É–≥–æ–µ'], state=Form.category)
async def process_category_invalid(message: types.Message):
    return await message.reply('ü§ñ –ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')


@dp.message_handler(state=Form.category)
async def process_category(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = message.text
        markup = types.ReplyKeyboardRemove()
        await Form.next()
        await message.answer(text='ü§ñ –û—Ç–ø—Ä–∞–≤—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É:', reply_markup=markup)


@dp.message_handler(state=Form.key_words)
async def process_key_words(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['key_words'] = message.text
        await add_new_question(data['question'], data['answer'], data['category'], data['key_words'])
        await message.answer(text='ü§ñ –í–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')

        await state.finish()


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_user_profile(id: int) -> None:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('INSERT INTO users (id) VALUES (?)', [id])
    conn.commit()
    conn.close()


async def add_new_question(question: str, answer: str, category: str, key_words: str) -> None:
    conn = sqlite3.connect("questions.db")
    cursor = conn.cursor()
    cursor.execute('INSERT INTO Questions (question, answer, category, count, key_words, status) VALUES (?, ?, ?, ?, ?, ?)', [question, answer, category, key_words, 1, 0])
    conn.commit()
    conn.close()


# –∏–Ω–∏—Ü–∞–∏–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def init_db():
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users')
        cursor.close()
        conn.close()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É!'.encode('utf-8'))
    except Exception:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(
            'CREATE TABLE users (id INTEGER PRIMARY KEY NOT NULL)'
        )
        conn.commit()
        conn.close()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –∏ –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É!'.encode('utf-8'))


if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)
